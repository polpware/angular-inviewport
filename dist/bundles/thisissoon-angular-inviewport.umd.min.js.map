{
  "version": 3,
  "file": "thisissoon-angular-inviewport.umd.min.js",
  "sources": [
    "ng://@thisissoon/angular-inviewport/out/app/in-viewport/window/window-ref.service.ts",
    "ng://@thisissoon/angular-inviewport/out/app/in-viewport/shared/event-data.ts",
    "ng://@thisissoon/angular-inviewport/out/app/in-viewport/in-viewport.directive.ts",
    "ng://@thisissoon/angular-inviewport/out/app/in-viewport/in-viewport.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\n\n/**\n * Service that acts a reference to window object\n * in platforms where `window` does not exists\n *\n */\n@Injectable()\nexport class WindowRef {\n  closed = null;\n  defaultStatus = null;\n  document = null;\n  frameElement = null;\n  frames = null;\n  history = null;\n  innerHeight = null;\n  innerWidth = null;\n  length = null;\n  localStorage = null;\n  location = null;\n  name = null;\n  navigator = null;\n  opener = null;\n  outerHeight = null;\n  outerWidth = null;\n  pageXOffsetleft = null;\n  pageYOffsetleft = null;\n  parent = null;\n  screen = null;\n  screenLeft = null;\n  screenTop = null;\n  screenX = null;\n  screenY = null;\n  sessionStorage = null;\n  scrollX = null;\n  scrollY = null;\n  self = null;\n  status = null;\n  top = null;\n  addEventListener(...args) {}\n  alert(...args) {}\n  atob(...args) {}\n  blur(...args) {}\n  btoa(...args) {}\n  clearInterval(...args) {}\n  clearTimeout(...args) {}\n  close(...args) {}\n  confirm(...args) {}\n  focus(...args) {}\n  getComputedStyle(...args) {}\n  getSelection(...args) {}\n  matchMedia(...args) {}\n  moveBy(...args) {}\n  moveTo(...args) {}\n  open(...args) {}\n  print(...args) {}\n  prompt(...args) {}\n  resizeBy(...args) {}\n  resizeTo(...args) {}\n  removeEventListener(...args) {}\n  scroll(...args) {}\n  scrollBy(...args) {}\n  scrollTo(...args) {}\n  setInterval(...args) {}\n  setTimeout(...args) {}\n  stop(...args) {}\n}\n",
    "export const eventPathScroll = [\n  '$event.target.defaultView.innerHeight',\n  '$event.target.defaultView.innerWidth',\n  '$event.target.defaultView.scrollY',\n  '$event.target.defaultView.scrollX'\n];\nexport const eventPathResize = [\n  '$event.target.innerHeight',\n  '$event.target.innerWidth',\n  '$event.target.scrollY',\n  '$event.target.scrollX'\n];\nexport const eventWindowResize = 'resize';\nexport const eventWindowScroll = 'scroll';\nexport const inViewportClass = 'class.sn-viewport-in';\nexport const notInViewportClass = 'class.sn-viewport-out';\n\nexport const eventScroll = 'scroll';\n",
    "import {\n    Directive, ElementRef, HostBinding, EventEmitter,\n    Input, Output, OnDestroy, AfterViewInit,\n    ChangeDetectorRef, NgZone\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { auditTime, debounceTime, takeUntil } from 'rxjs/operators';\n\nimport { WindowRef } from './window/window-ref.service';\nimport { Viewport } from './shared/viewport.model';\nimport * as eventData from './shared/event-data';\n\n/**\n * A simple lightweight library for Angular with no\n * external dependencies that detects when an element is within the\n * browser viewport and adds a `in-viewport` or `not-in-viewport` class\n * to the element.\n *\n * @example\n * ```html\n * <p\n *  class=\"foo\"\n *  snInViewport\n *  (inViewportChange)=\"myEventHandler($event)\"\n *  [debounce]=\"300\">\n *  Amet tempor excepteur occaecat nulla.\n * </p>\n * ```\n */\n@Directive({\n    selector: '[snInViewport]',\n    exportAs: 'snInViewport'\n})\nexport class InViewportDirective implements AfterViewInit, OnDestroy {\n    /**\n     * If true means the element is in the browser viewport\n     *\n     * @memberof InViewportDirective\n     */\n    private inViewport: boolean;\n    /**\n     * Observable that returns the size of the viewport\n     *\n     * @memberof InViewportDirective\n     */\n    private viewport$ = new Subject<void>();\n    /**\n     * Completes on component destroy lifecycle event\n     * use to handle unsubscription from infinite observables\n     *\n     * @memberof InViewportDirective\n     */\n    private ngUnsubscribe$ = new Subject<void>();\n    /**\n     * Emits event when `inViewport` value changes\n     *\n     * @memberof InViewportDirective\n     */\n    @Output()\n    public inViewportChange = new EventEmitter<boolean>();\n    /**\n     * Amount of time in ms to wait for other scroll events\n     * before running event handler\n     *\n     * @memberof InViewportDirective\n     */\n    @Input()\n    public debounce = 100;\n    /**\n     * A parent element to listen to scroll events from\n     *\n     * @memberof InViewportDirective\n     */\n    @Input()\n    public parent: any;\n    /**\n     * Returns true if element is in viewport\n     *\n     * @memberof InViewportDirective\n     */\n    @HostBinding(eventData.inViewportClass)\n    public get isInViewport(): boolean {\n        return this.inViewport;\n    }\n    /**\n     * Returns true if element is not in viewport\n     *\n     * @readonly\n     *\n     * @memberof InViewportDirective\n     */\n    @HostBinding(eventData.notInViewportClass)\n    public get isNotInViewport(): boolean {\n        return !this.inViewport;\n    }\n    /**\n     * Get window viewport values\n     *\n     * @memberof InViewportDirective\n     */\n    public get viewport(): Viewport {\n        const bottom = this.windowRef.innerHeight;\n        const left = 0;\n        const right = this.windowRef.innerWidth;\n        const top = 0;\n        return { bottom, right, left, top };\n    }\n    /**\n     * Creates an instance of InViewportDirective.\n     *\n     * @memberof InViewportDirective\n     */\n    constructor(\n        private el: ElementRef,\n        private windowRef: WindowRef,\n        private cdRef: ChangeDetectorRef,\n        public ngZone: NgZone\n    ) {\n        this.inViewport = false;\n    }\n    /**\n     * Subscribe to `viewport$` observable which\n     * will call event handler\n     *\n     * @memberof InViewportDirective\n     */\n    public ngAfterViewInit(): void {\n        setTimeout(() => {\n            this.calculateInViewportStatus();\n        }, 100);\n        this.cdRef.detectChanges();\n\n        this.viewport$\n            .pipe(\n            debounceTime(this.debounce),\n            takeUntil(this.ngUnsubscribe$)\n            )\n            .subscribe(() => this.calculateInViewportStatus());\n\n        // Listen for window scroll/resize events.\n        this.ngZone.runOutsideAngular(() => {\n            merge(\n                fromEvent(this.windowRef as any, eventData.eventWindowResize),\n                fromEvent(this.windowRef as any, eventData.eventWindowScroll)\n            )\n                .pipe(\n                auditTime(this.debounce),\n                takeUntil(this.ngUnsubscribe$)\n                )\n                .subscribe(() => this.onViewportChange());\n        });\n\n        if (this.parent) {\n            this.ngZone.runOutsideAngular(() => {\n                fromEvent(this.parent, eventData.eventScroll)\n                    .pipe(\n                    auditTime(this.debounce),\n                    takeUntil(this.ngUnsubscribe$)\n                    )\n                    .subscribe(() => this.onParentScroll());\n            });\n        }\n    }\n    /**\n     * Get window element from parent scroll event and\n     * emit next value in `viewport$` observable\n     *\n     * @memberof InViewportDirective\n     */\n    public onParentScroll() {\n        this.viewport$.next();\n    }\n    /**\n     * On window scroll/resize/load events\n     * emit next `viewport$` observable value\n     *\n     * @memberof InViewportDirective\n     */\n    public onViewportChange(): void {\n        this.viewport$.next();\n    }\n    /**\n     * Calculate inViewport status and emit event\n     * when viewport status has changed\n     *\n     * @memberof InViewportDirective\n     */\n    public calculateInViewportStatus(): void {\n        const el = this.el.nativeElement;\n        let inParentViewport = false;\n        let inWindowViewport = false;\n\n        if (this.parent) {\n            const parentBounds = this.parent.getBoundingClientRect();\n            inParentViewport = this.isInElementViewport(parentBounds, el);\n            inWindowViewport = this.isInElementViewport(this.viewport, this.parent);\n        } else {\n            inParentViewport = true;\n            inWindowViewport = this.isInElementViewport(this.viewport, el);\n        }\n        const oldInViewport = this.inViewport;\n        this.inViewport = (inParentViewport && inWindowViewport);\n\n        if (oldInViewport !== this.inViewport) {\n            this.ngZone.run(() => this.inViewportChange.emit(this.inViewport));\n        }\n    }\n    /**\n     * Returns true if an element is currently within the `viewport`\n     *\n     * @memberof InViewportDirective\n     */\n    public isInElementViewport(viewport: Viewport, el: any): boolean {\n        // Check if `getBoundingClientRect` is a function in case running this code\n        // in an evironment without the DOM\n        if (typeof el.getBoundingClientRect === 'function') {\n            const elBounds = el.getBoundingClientRect();\n            return (\n                (\n                    (elBounds.top >= viewport.top) && (elBounds.top <= viewport.bottom) ||\n                    (elBounds.bottom >= viewport.top) && (elBounds.bottom <= viewport.bottom) ||\n                    (elBounds.top <= viewport.top) && (elBounds.bottom >= viewport.bottom)\n                ) &&\n                (\n                    (elBounds.left >= viewport.left) && (elBounds.left <= viewport.right) ||\n                    (elBounds.right >= viewport.left) && (elBounds.right <= viewport.right) ||\n                    (elBounds.left <= viewport.left && elBounds.right >= viewport.right)\n                )\n            );\n        } else {\n            return false;\n        }\n    }\n    /**\n     * trigger `ngUnsubscribe` complete on\n     * component destroy lifecycle hook\n     *\n     * @memberof InViewportDirective\n     */\n    public ngOnDestroy(): void {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n}\n",
    "import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { WindowRef } from './window/window-ref.service';\n\nimport { InViewportDirective } from './in-viewport.directive';\n\nconst defaultProviders = [\n  WindowRef\n];\n\n/**\n * A simple lightweight library for Angular with other dependencies\n * that detects when an element is within the browser viewport and adds a\n * sn-viewport-in or sn-viewport-out class to the element.\n */\n@NgModule({\n  declarations: [InViewportDirective],\n  exports: [InViewportDirective]\n})\nexport class InViewportModule {\n  /**\n   * Specify a static method for root module to ensure providers are only provided once\n   * but allows the module to still be imported into other modules without reproviding\n   * services.\n   *\n   * @memberof InViewportModule\n   */\n  public static forRoot(providers: Provider[] = defaultProviders): ModuleWithProviders {\n    return {\n      ngModule: InViewportModule,\n      providers: providers\n    };\n  }\n}\n"
  ],
  "names": [
    "WindowRef",
    "this",
    "closed",
    "defaultStatus",
    "document",
    "frameElement",
    "frames",
    "history",
    "innerHeight",
    "innerWidth",
    "length",
    "localStorage",
    "location",
    "name",
    "navigator",
    "opener",
    "outerHeight",
    "outerWidth",
    "pageXOffsetleft",
    "pageYOffsetleft",
    "parent",
    "screen",
    "screenLeft",
    "screenTop",
    "screenX",
    "screenY",
    "sessionStorage",
    "scrollX",
    "scrollY",
    "self",
    "status",
    "top",
    "prototype",
    "addEventListener",
    "args",
    "_i",
    "arguments",
    "alert",
    "atob",
    "blur",
    "btoa",
    "clearInterval",
    "clearTimeout",
    "close",
    "confirm",
    "focus",
    "getComputedStyle",
    "getSelection",
    "matchMedia",
    "moveBy",
    "moveTo",
    "open",
    "print",
    "prompt",
    "resizeBy",
    "resizeTo",
    "removeEventListener",
    "scroll",
    "scrollBy",
    "scrollTo",
    "setInterval",
    "setTimeout",
    "stop",
    "type",
    "Injectable",
    "eventWindowResize",
    "eventWindowScroll",
    "inViewportClass",
    "notInViewportClass",
    "eventScroll",
    "InViewportDirective",
    "el",
    "windowRef",
    "cdRef",
    "ngZone",
    "viewport$",
    "Subject",
    "ngUnsubscribe$",
    "inViewportChange",
    "EventEmitter",
    "debounce",
    "inViewport",
    "Object",
    "defineProperty",
    "get",
    "bottom",
    "right",
    "left",
    "ngAfterViewInit",
    "_this",
    "calculateInViewportStatus",
    "detectChanges",
    "pipe",
    "debounceTime",
    "takeUntil",
    "subscribe",
    "runOutsideAngular",
    "merge",
    "fromEvent",
    "eventData.eventWindowResize",
    "eventData.eventWindowScroll",
    "auditTime",
    "onViewportChange",
    "eventData.eventScroll",
    "onParentScroll",
    "next",
    "nativeElement",
    "inParentViewport",
    "inWindowViewport",
    "parentBounds",
    "getBoundingClientRect",
    "isInElementViewport",
    "viewport",
    "oldInViewport",
    "run",
    "emit",
    "elBounds",
    "ngOnDestroy",
    "complete",
    "Directive",
    "selector",
    "exportAs",
    "ElementRef",
    "ChangeDetectorRef",
    "NgZone",
    "Output",
    "Input",
    "isInViewport",
    "HostBinding",
    "eventData.inViewportClass",
    "isNotInViewport",
    "eventData.notInViewportClass",
    "defaultProviders",
    "InViewportModule",
    "forRoot",
    "providers",
    "ngModule",
    "NgModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
